/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-14 06:00:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.mysite.board.BoardDTO;

public final class getBoardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysite.board.BoardDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    ");

    	//세션에 저장된 값을 끄집어 낸다.
    	List<BoardDTO>boardList = new ArrayList<BoardDTO>();
    
    
    	boardList = (List)session.getAttribute("boardList");
    
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>글 목록</title>\r\n");
      out.write("<style>\r\n");
      out.write("	div{\r\n");
      out.write("		width:750px;\r\n");
      out.write("		margin: 0 auto;\r\n");
      out.write("	\r\n");
      out.write("	}\r\n");
      out.write("	select,input{\r\n");
      out.write("		padding : 3px;\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div>\r\n");
      out.write("	<h1> 글 목록 </h1>\r\n");
      out.write("	<br>\r\n");
      out.write("	<table border=\"1px\" cellpadding=\"0\" cellspacing=\"0\" width=\"700px\">\r\n");
      out.write("		<tr><td>\r\n");
      out.write("			<form action=\"getBoardList.do\" method=\"post\">\r\n");
      out.write("				<select name =\"searchCondition\" >\r\n");
      out.write("					<option value=\"TITLE\">제목 검색</option>\r\n");
      out.write("					<option value=\"WRITER\">글 쓴이 검색</option>\r\n");
      out.write("					<option value=\"CONTENT\">내용 검색</option>\r\n");
      out.write("					<option value = \"REGDATE\"> 날짜 년도 검색 </option>\r\n");
      out.write("				</select>\r\n");
      out.write("				\r\n");
      out.write("				<input type=\"text\" name=\"searchkeyword\" size=\"40\"/>\r\n");
      out.write("				<input type=\"submit\" value=\"검색시작\">\r\n");
      out.write("			</form>\r\n");
      out.write("		</td></tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	주의 : 날짜 검색시 년-월-일 형식으로 넣으세요. 예) 2023-07-10\r\n");
      out.write("	<br> <br> \r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	<table border=\"1px\" cellpadding=\"0\" cellspacing=\"0\" width=\"700px\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th bgcolor=\"orange\" width=\"100px\">번호</th>\r\n");
      out.write("			<th bgcolor=\"orange\" width=\"200px\">제목</th>\r\n");
      out.write("			<th bgcolor=\"orange\" width=\"150px\">작성자</th>\r\n");
      out.write("			<th bgcolor=\"orange\" width=\"150px\">등록일</th>\r\n");
      out.write("			<th bgcolor=\"orange\" width=\"100px\">조회수</th>\r\n");
      out.write("		\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("		<!-- DB에 값을 가져와서 루프 시작 -->\r\n");
      out.write("		");

			for(BoardDTO k : boardList){
		
		
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>");
      out.print( k.getSeq() );
      out.write(" </td>\r\n");
      out.write("			<!-- 제목에 링크를 걸어서 글의 상세페이지를 출력할 수 있도록 Get 방식으로 링크 설정 -->\r\n");
      out.write("			<td> \r\n");
      out.write("				<a href=\"getBoard.do?seq=");
      out.print( k.getSeq() );
      out.write("\">\r\n");
      out.write("		");
      out.print( k.getTitle() );
      out.write("\r\n");
      out.write("		</a>	\r\n");
      out.write("			</td>\r\n");
      out.write("			<td>");
      out.print( k.getWrite() );
      out.write(" </td>\r\n");
      out.write("			<td>");
      out.print( k.getRegdate() );
      out.write(" </td>\r\n");
      out.write("			<td>");
      out.print( k.getCnt() );
      out.write(" </td>		\r\n");
      out.write("		</tr>	\r\n");
      out.write("		\r\n");
      out.write("		 ");

			}
		    
		    //session 변수를 사용후 변수에 담긴 값을 제거 
			session.removeAttribute("boardList"); 
		 
      out.write("\r\n");
      out.write("		 \r\n");
      out.write("		\r\n");
      out.write("		<!-- DB에 값을 가져와서 루프 시작 -->\r\n");
      out.write("		\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("		<br><br>\r\n");
      out.write("		<a href=\"InsertBoard.jsp\">새 글 등록</a><p/>\r\n");
      out.write("		<a href=\"/JSP_Study_MVC_M2\">처음으로 이동</a>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
